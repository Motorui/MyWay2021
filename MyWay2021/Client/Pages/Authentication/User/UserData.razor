@page "/users"

@inject IToastService toastService
@inject HttpClient client
@inject IJSRuntime js

<AuthorizeView Context="authContext">
    <Authorized>
        <BreadCrumb breadCrumbs="breadCrumbs"></BreadCrumb>
        <div class="container-fluid">
            <div class="row">
                <div class="col-12 col-md-8 col-lg-6">
                    <SfCard ID="Utilizadores">
                        <CardHeader Title="Utilizadores" />
                        <CardContent>
                            <SpinLoader IsLoading="@(users == null)">
                                <LoadingTemplate>
                                    <div class="modal-overlay">
                                        <Chase Color="#ff0000" Size="60px" Center="true" />
                                    </div>
                                </LoadingTemplate>
                                <ContentTemplate>
                                    @if (users.Length == 0)
                                    {
                                        <text>Não foram encontrados utilizadores na base de dados</text>
                                    }
                                    else
                                    {
                                        <table class="table table-striped table-bordered table-hover">
                                            <thead class="thead-light">
                                                <tr>
                                                    @if (@authContext.User.IsInRole("Admins"))
                                                    {

                                                    }
                                                    <th scope="col">Menu</th>
                                                    <th scope="col">Username</th>
                                                    <th scope="col">Nome</th>
                                                    <th scope="col">Email</th>
                                                    <th scope="col">Função</th>
                                                    <th scope="col">UH'S</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var user in users)
                                                {
                                                    <tr>
                                                        <td width="120px" align="center">
                                                            <span class="d-inline-block" tabindex="0" data-toggle="tooltip" data-placement="top"
                                                                  title="Editar Utilizador">
                                                                <button type="button" class="btn btn-info"
                                                                        data-toggle="modal" data-target="#userModal"
                                                                        @onclick="@(() => PrepareForEdit(user))">
                                                                    <i class="fas fa-edit"></i>
                                                                </button>
                                                            </span>
                                                            <span class="d-inline-block" tabindex="0" data-toggle="tooltip" data-placement="top"
                                                                  title="Apagar Utilizador">
                                                                <button type="button" class="btn btn-danger"
                                                                        data-toggle="modal" data-target="#confirmDeleteModal"
                                                                        @onclick="@(() => PrepareForDelete(user))">
                                                                    <i class="fas fa-trash-alt"></i>
                                                                </button>
                                                            </span>
                                                        </td>
                                                        <td>@user.UserName</td>
                                                        <td>@user.Nome</td>
                                                        <td>@user.Email</td>
                                                        <td>
                                                            @{var listRoles = userRoles.Where(i => i.UserId == user.Id);}
                                                            @foreach (var r in listRoles)
                                                            {
                                                                <p>
                                                                    @{ var roleName = roleList.Where(i => i.Id == r.RoleId).Select(n => n.Name).FirstOrDefault().ToString();}
                                                                    <span class="badge badge-secondary">@roleName</span>
                                                                </p>
                                                            }
                                                        </td>
                                                        <td>
                                                            @{var listUhs = userUhs.Where(i => i.UserId == user.Id);}
                                                            @foreach (var u in listUhs)
                                                            {
                                                                var uhIata = uhsList.Where(i => i.ID == u.UhID).Select(n => n.Nome).FirstOrDefault().ToString();
                                                                <span class="badge badge-info">@uhIata</span>
                                                            }
                                                        </td>
                                                    </tr>
                                                }

                                            </tbody>
                                        </table>
                                    }
                                </ContentTemplate>
                                <FaultedContentTemplate>
                                    <text>ERRO! Por favor contacte o administrador do sistema!</text>
                                </FaultedContentTemplate>
                            </SpinLoader>
                        </CardContent>
                        <CardFooter>
                            <CardFooterContent>
                                <span class="d-inline-block" tabindex="0" data-toggle="tooltip" data-placement="top"
                                      title="Criar novo utilizador">
                                    <button type="button" class="btn btn-success"
                                            data-toggle="modal" data-target="#userModal"
                                            @onclick="@(() => PrepareToAdd())">
                                        <i class="fas fa-plus"></i>&nbsp;Criar
                                    </button>
                                </span>
                            </CardFooterContent>
                        </CardFooter>
                    </SfCard>
                </div>
            </div>
        </div>

        <ConfirmDialog OnClick="@Delete">
            <ConfirmText>
                <p>Deseja de apagar o utilizador @itemToDelete ?</p>
                <p>Não será possível recuperar este utilizador!</p>
            </ConfirmText>
        </ConfirmDialog>
        <UserModal ModelUser=modelUser DataChanged="@DataChanged"
                   UhList=uhsList RoleList=roleList
                   UserRoles=userRoles UserUhs=userUhs
                   IsEdit="@isEdit">
            <CustomHeader>@customHeader</CustomHeader>
        </UserModal>

    </Authorized>
    <NotAuthorized>
        <p>Não está logado.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    public List<BreadCrumbData> breadCrumbs = new List<BreadCrumbData>();

    RegisterUser[] users { get; set; }
    RegisterRoles[] roleList { get; set; }
    RegisterUserRole[] userRoles { get; set; }
    RegisterUserUh[] userUhs { get; set; }
    Uh[] uhsList { get; set; }

    RegisterUser modelUser = new RegisterUser();
    Guid UserToDelete { get; set; }
    string itemToDelete = string.Empty;
    string customHeader = string.Empty;
    bool isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        BreadCrumbData breadCrumb = new BreadCrumbData
        {
            Text = "Início",
            Url = "/"
        };
        breadCrumbs.Add(breadCrumb);

        breadCrumb = new BreadCrumbData
        {
            Text = "Utilizadores",
            Url = "/users"
        };
        breadCrumbs.Add(breadCrumb);

        users = await client.GetFromJsonAsync<RegisterUser[]>("api/auth/get");
        roleList = await client.GetFromJsonAsync<RegisterRoles[]>("api/auth/getroles");
        userRoles = await client.GetFromJsonAsync<RegisterUserRole[]>("api/auth/getuserroles");
        userUhs = await client.GetFromJsonAsync<RegisterUserUh[]>("api/auth/getuseruhs");
        uhsList = await client.GetFromJsonAsync<Uh[]>("api/Uh");
    }

    private async void DataChanged()
    {
        breadCrumbs.Clear();
        await OnInitializedAsync();
        StateHasChanged();
    }

    private void PrepareToAdd()
    {
        modelUser = new RegisterUser();
        customHeader = "Adicionar Utilizador";
        isEdit = false;
    }

    private void PrepareForEdit(RegisterUser user)
    {
        customHeader = "Editar Utilizador";
        modelUser = user;
        isEdit = true;
    }

    private void PrepareForDelete(RegisterUser user)
    {
        itemToDelete = user.Nome;
        UserToDelete = user.Id;
    }

    async Task Delete()
    {
        var response = await client.DeleteAsync($"api/auth/delete/{UserToDelete}");
        if (response.IsSuccessStatusCode)
        {
            await client.DeleteAsync($"api/auth/deleteuseruhs/{UserToDelete}");
            await client.DeleteAsync($"api/auth/deleteuserroles/{UserToDelete}");
        }

        await CloseModal("confirmDeleteModal");
        toastService.ShowSuccess("Utilizador apagado com sucesso", "Sucesso!");

        breadCrumbs.Clear();
        await OnInitializedAsync();
    }

    private async Task CloseModal(string modalId)
    {
        await Task.Delay(100);
        await js.InvokeAsync<object>("global.closeModal", modalId);
    }
}
